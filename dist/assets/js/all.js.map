{"version":3,"sources":["tictactoe.js","tictactoe.test.js"],"names":["readline","require","rl","createInterface","input","process","stdin","output","stdout","module","exports","player","lastMovedBy","tictactoe","board","initBoard","console","log","displayBoard","playGame","question","array","trim","split","row","parseInt","column","inBound","isDraw","close","isPlayerWinning","i","j","index","join","describe","it","expect","toBe"],"mappings":"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","file":"all.js","sourcesContent":["const readline = require(\"readline\");\r\nconst rl = readline.createInterface({\r\n    input: process.stdin,\r\n    output: process.stdout\r\n});\r\nmodule.exports = {};\r\nvar player = 1;\r\nvar lastMovedBy = 'X';\r\nvar tictactoe = function() {\r\n    var board = [];\r\n    initBoard(board);\r\n    console.log(\"Welcome! Here is your board.\");\r\n    displayBoard(board);\r\n    playGame(board);\r\n}\r\n\r\nvar playGame = function(board) {\r\n    rl.question(`Player${player} (${lastMovedBy} where would you like to move?)`, function(input) {\r\n        input = input.trim();\r\n        var array = input.split(' ');\r\n        var row = parseInt(array[0]);\r\n        var column = parseInt(array[1]);\r\n        if(inBound(row) && inBound(column)) {\r\n            player === 1 ? board[row][column] = 'X' : board[row][column] = 'O';\r\n            displayBoard(board);\r\n            if(isDraw(board)) {\r\n                console.log(\"DRAW!!\");\r\n                return rl.close();\r\n            }\r\n            if(isPlayerWinning(board)) {\r\n                console.log(`Player${player} WINS!!`);\r\n                return rl.close();\r\n            }\r\n        }\r\n        player < 2 ? player++ : player--;\r\n        player === 1 ? lastMovedBy = 'X' : lastMovedBy = 'O';\r\n        playGame(board);\r\n    });\r\n}\r\n\r\nmodule.exports.isPlayerWinning = function(board) {\r\n    return (board[0][0] === lastMovedBy && board[0][1] === lastMovedBy && board[0][2] === lastMovedBy) ||\r\n    (board[1][0] === lastMovedBy && board[1][1] === lastMovedBy && board[1][2] === lastMovedBy) ||\r\n    (board[2][0] === lastMovedBy && board[2][1] === lastMovedBy && board[2][2] === lastMovedBy) ||\r\n    (board[0][0] === lastMovedBy && board[1][0] === lastMovedBy && board[2][0] === lastMovedBy) ||\r\n    (board[0][1] === lastMovedBy && board[1][1] === lastMovedBy && board[2][1] === lastMovedBy) ||\r\n    (board[0][2] === lastMovedBy && board[1][2] === lastMovedBy && board[2][2] === lastMovedBy) ||\r\n    (board[0][0] === lastMovedBy && board[1][1] === lastMovedBy && board[2][2] === lastMovedBy) ||\r\n    (board[2][0] === lastMovedBy && board[1][1] === lastMovedBy && board[0][2] === lastMovedBy) \r\n}\r\n\r\nmodule.exports.isDraw = function(board) {\r\n    for(var i = 0; i < 3; i++) {\r\n        for(var j = 0; j < 3; j++) {\r\n            if(board[i][j] === '-') {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nmodule.exports.inBound = function(index) {\r\n    return index >= 0 && index < 3;\r\n}\r\n\r\nvar initBoard = function(board) {\r\n    for(var i = 0; i < 3; i++) {\r\n        board[i] = [];\r\n        for(var j = 0; j < 3; j++) {\r\n            board[i][j] = '-';\r\n        }\r\n    }\r\n}\r\n\r\nvar displayBoard = function(board) {\r\n    for(var i = 0; i < 3; i++) {\r\n        var array = board[i];\r\n        console.log(array.join(\",\"));\r\n    }\r\n}\r\n\r\n","var tictactoe = require('./tictactoe');\r\ndescribe(\"check horizontal winning\", () => {\r\n    it('should win horizontal ', () => {\r\n        var board = [['X', 'X', 'X'], ['-', 'O', '-'], ['X', '-', 'O']];\r\n        expect(tictactoe.isPlayerWinning(board)).toBe(true);\r\n    });\r\n    \r\n});\r\n\r\ndescribe(\"check vertical winning\", () => {\r\n    it('should win vertical', () => {\r\n        var board = [['X', '-', 'O'], ['X', 'O', 'O'], ['X', 'O', 'O']];\r\n        expect(tictactoe.isPlayerWinning(board)).toBe(true);\r\n    })\r\n});\r\n\r\ndescribe(\"check diagonal winning\", () => {\r\n    it('should win primary diagonal', () => {\r\n        var board = [['X', '-', '-'], ['O', 'X', 'O'], ['O', 'O', 'X']];\r\n        expect(tictactoe.isPlayerWinning(board)).toBe(true);\r\n    });\r\n\r\n    it('should win secondary diagonal', () => {\r\n        var board =[['X', '-', 'X'], ['O', 'X', '-'], ['X', 'O', 'O']];\r\n        expect(tictactoe.isPlayerWinning(board)).toBe(true);\r\n    });\r\n});\r\n"]}